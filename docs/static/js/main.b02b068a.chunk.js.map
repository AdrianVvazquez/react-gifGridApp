{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategoria","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","console","log","type","value","onChange","target","getGifs","categoria","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setstate","useEffect","then","imgs","useFetchGifs","GifExpertApp","categorias","i","ReactDOM","render","document","getElementById"],"mappings":"6LAGaA,EAAc,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aAE1B,EAAoCC,mBAAS,IAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KAkBA,OACI,sBAAMC,SAbU,SAACC,GACjBA,EAAEC,iBAEEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAa,SAAAS,GAAI,OAAMP,GAAN,mBAAqBO,OACtCN,EAAc,KAGlBO,QAAQC,IAAIT,EAAW,aAIvB,SAEI,uBACIU,KAAK,OACLC,MAAQX,EACRY,SAtBQ,SAACT,GACjBF,EAAcE,EAAEU,OAAOF,a,+BCNlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,6DACbC,EADa,iDACmCC,UAAUH,GAD7C,+DAEAI,MAAOF,GAFP,cAEbG,EAFa,gBAGIA,EAAKC,OAHT,uBAGXC,EAHW,EAGXA,KACFC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC1B,MAAO,CACHC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARvB,kBAWZM,GAXY,4CAAH,sDCAPO,EAAc,SAAC,GAAqB,IAAlBH,EAAiB,EAAjBA,MAAOV,EAAU,EAAVA,IAElC,OACI,sBAAKc,UAAU,iDAAf,UACI,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,kCAAMA,EAAN,WCHCO,EAAU,SAAC,GAAmB,IAAjBnB,EAAgB,EAAhBA,UAEtB,ECHwB,SAAEA,GAE1B,MAA0BhB,mBAAS,CAC/BuB,KAAO,GACPa,SAAS,IAFb,mBAAOC,EAAP,KAAcC,EAAd,KAkBA,OAbAC,qBAAW,WACPxB,EAAQC,GACHwB,MAAM,SAAAC,GACHH,EAAS,CACLf,KAAMkB,EACNL,SAAS,SAKtB,CAACpB,IAGGqB,EDjB0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAaa,EAArB,EAAqBA,QAErB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAmDhB,IAEjDoB,GAAW,mBAAGJ,UAAU,mCAAb,wBAEb,qBAAKA,UAAU,YAAf,SAEQH,EAAOJ,KAAK,SAAAC,GAAG,OACX,cAAC,EAAD,eAESA,GADGA,EAAIC,aEb3BgB,EAAe,WAExB,MAAmC3C,mBAAS,CAAC,cAA7C,mBAAO4C,EAAP,KAAmB7C,EAAnB,KAEA,OACI,qCACI,8CACA,cAAC,EAAD,CACIA,aAAiBA,IAErB,uBAEA,6BAEQ6C,EAAWnB,KAAK,SAACT,EAAW6B,GAAZ,OACZ,aADgC,CAC/B,EAAD,CAEI7B,UAAcA,GADN6B,YCfpCC,IAASC,OACL,cAAC,EAAD,IACFC,SAASC,eAAe,W","file":"static/js/main.b02b068a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport const AddCategory = ({ setCategoria }) => {\r\n    \r\n    const [inputValue, setInputValue] = useState('');\r\n    \r\n    const inputChange = (e) => {\r\n        setInputValue(e.target.value);\r\n    }\r\n\r\n    const inputSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if (inputValue.trim().length > 2) {\r\n            // No es necesario traer el estado aterior, pues la función lo conoce\r\n            setCategoria(cats => [ inputValue, ...cats, ]);\r\n            setInputValue('');\r\n        }\r\n\r\n        console.log(inputValue,'submited')\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={ inputSubmit }>\r\n\r\n            <input \r\n                type='text'\r\n                value={ inputValue }\r\n                onChange={ inputChange }\r\n            />\r\n        </form>\r\n    )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n    setCategoria: PropTypes.func.isRequired\r\n}\r\n","\r\n\r\nexport const getGifs = async ( categoria ) => {\r\n    const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(categoria)}&limit=10&api_key=3E6xWV3ScFbWVJBa7fk3aQryIpXuNuJA`\r\n    const resp = await fetch( url );\r\n    const { data } = await resp.json();\r\n    const gifs = data.map( img => {\r\n        return {\r\n            id: img.id,\r\n            title: img.title,\r\n            url: img.images?.downsized_medium.url\r\n        }\r\n    })\r\n    return gifs;\r\n\r\n}","import React from 'react'\r\n\r\nexport const GifGridItem = ( { title, url} ) => {\r\n\r\n    return (\r\n        <div className='card animate__animated animate__fadeInRightBig'>\r\n            <img src={url} alt={title} />\r\n            <p> { title } </p>    \r\n        </div>\r\n    )\r\n}\r\n","import React, { useState, useEffect } from 'react'\r\nimport { useFetchGifs } from '../hooks/useFetchGifs'\r\nimport { GifGridItem } from './GifGridItem';\r\n\r\nexport const GifGrid = ({ categoria }) => {\r\n\r\n    const { data:images, loading } = useFetchGifs(categoria);\r\n\r\n    return (\r\n        <>\r\n            <h3 className='animate__animated animate_fadeIn'>{ categoria }</h3>\r\n\r\n            { loading && <p className='animate__animated animate__flash'>loading...</p> }\r\n\r\n            <div className='card-grid'>\r\n                {\r\n                    images.map( img => (\r\n                        <GifGridItem \r\n                            key = { img.id }\r\n                            { ...img }\r\n                            />\r\n                    ))\r\n                }\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import { useState, useEffect } from 'react'\r\nimport { getGifs } from '../helpers/getGifs';\r\n\r\nexport const useFetchGifs = ( categoria ) => {\r\n\r\n    const [state, setstate] = useState({\r\n        data : [],\r\n        loading: true\r\n    });\r\n\r\n    useEffect( () => {\r\n        getGifs(categoria)\r\n            .then( imgs => {\r\n                setstate({\r\n                    data: imgs, // Arreglo de imagenes\r\n                    loading: false\r\n                }); \r\n\r\n        })\r\n\r\n    }, [categoria]) // Arreglo de dependencias\r\n\r\n\r\n    return state;\r\n}","// rafc\r\nimport React, { useState } from 'react'\r\nimport { AddCategory } from './components/AddCategory'\r\nimport { GifGrid } from './components/GifGrid';\r\n\r\nexport const GifExpertApp = () => {\r\n\r\n    const [categorias, setCategoria] = useState(['Chocolate']);\r\n\r\n    return (\r\n        <>\r\n            <h2>GifExpertApp</h2>\r\n            <AddCategory \r\n                setCategoria = { setCategoria }\r\n            />\r\n            <hr />\r\n\r\n            <ol>\r\n                {\r\n                    categorias.map( (categoria, i) => ( // Parentesis para regresar un objeto\r\n                        <GifGrid // Colección de elementos de una categoría\r\n                            key = { i }\r\n                            categoria = { categoria }\r\n                        />\r\n                    ))\r\n                }\r\n            </ol>\r\n\r\n        </>\r\n    )\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './index.css';\nimport { GifExpertApp } from './GifExpertApp';\n\nReactDOM.render(\n    <GifExpertApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}